<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structures on Prasanth Janardhanan</title>
    <link>/tags/data-structures/</link>
    <description>Recent content in Data Structures on Prasanth Janardhanan</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Prasanth Janardhanan</copyright>
    <lastBuildDate>Wed, 15 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/data-structures/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lock-Free Data Structures and Wait-Free Algorithms in Go: From Theory to Practice</title>
      <link>/go/lock-free-data-structures/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      <guid>/go/lock-free-data-structures/</guid>
      <description>&lt;p&gt;Have you ever been stuck in a bank line where everyone needs to visit the same teller? Frustrating, right? Now imagine a bank where every customer could magically make their transaction without waiting for others to finish. Sounds like a dream? Well, that&amp;rsquo;s exactly what lock-free and wait-free programming aims to achieve in the world of concurrent computing!&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-concurrent-programming-challenge&#34;&gt;The Concurrent Programming Challenge&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s start with a simple scenario. Imagine you and your roommate share a kitchen (our computer&amp;rsquo;s memory), and you&amp;rsquo;re both trying to make sandwiches (execute operations) at the same time. In traditional programming, we&amp;rsquo;d put a lock on the kitchen â€“ &amp;ldquo;Hey, I&amp;rsquo;m using the kitchen, wait your turn!&amp;rdquo; But what if your roommate just needs to grab a glass of water? Should they really have to wait for your entire sandwich-making process to finish?&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
