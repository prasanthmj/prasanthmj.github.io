<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Temporal on Prasanth Janardhanan</title>
    <link>/tags/temporal/</link>
    <description>Recent content in Temporal on Prasanth Janardhanan</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Prasanth Janardhanan</copyright>
    <lastBuildDate>Thu, 28 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/temporal/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Reliable ETL System with Go and Temporal: When Data Needs to Move Like a Marvel Superhero ü¶∏‚Äç‚ôÇÔ∏è</title>
      <link>/microservices/etl-go-temporal/</link>
      <pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate>
      <guid>/microservices/etl-go-temporal/</guid>
      <description>&lt;p&gt;Ever tried moving your entire apartment through a drinking straw? That&amp;rsquo;s basically what building ETL (Extract, Transform, Load) systems feels like sometimes. You&amp;rsquo;ve got terabytes of data that need to go from Point A to Point B, transform from one shape to another along the way, and arrive without losing a single byte. Oh, and it needs to happen yesterday.&lt;/p&gt;&#xA;&lt;p&gt;As a backend engineer who&amp;rsquo;s battled these challenges at scale, I&amp;rsquo;ve learned that building reliable ETL systems is less about writing perfect code (though that helps) and more about preparing for everything that could possibly go wrong. Because trust me, Murphy&amp;rsquo;s Law isn&amp;rsquo;t just a suggestion when it comes to data pipelines ‚Äì it&amp;rsquo;s more like a promise.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
