<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Microservices on Prasanth Janardhanan</title>
    <link>/microservices/</link>
    <description>Recent content in Microservices on Prasanth Janardhanan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Prasanth Janardhanan</copyright>
    <lastBuildDate>Thu, 28 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="/microservices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Reliable ETL System with Go and Temporal: When Data Needs to Move Like a Marvel Superhero ü¶∏‚Äç‚ôÇÔ∏è</title>
      <link>/microservices/etl-go-temporal/</link>
      <pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>/microservices/etl-go-temporal/</guid>
      <description>Ever tried moving your entire apartment through a drinking straw? That&amp;rsquo;s basically what building ETL (Extract, Transform, Load) systems feels like sometimes. You&amp;rsquo;ve got terabytes of data that need to go from Point A to Point B, transform from one shape to another along the way, and arrive without losing a single byte. Oh, and it needs to happen yesterday.
As a backend engineer who&amp;rsquo;s battled these challenges at scale, I&amp;rsquo;ve learned that building reliable ETL systems is less about writing perfect code (though that helps) and more about preparing for everything that could possibly go wrong.</description>
    </item>
    
    <item>
      <title>Your Legacy System is Trying to Tell You Something (And It&#39;s Not &#39;Please Reboot&#39;)</title>
      <link>/microservices/legacy-systems-to-microservices/</link>
      <pubDate>Mon, 25 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>/microservices/legacy-systems-to-microservices/</guid>
      <description>You know that uneasy feeling when your car makes a noise it&amp;rsquo;s definitely not supposed to make? That moment when you turn down the radio, tilt your head, and think, &amp;ldquo;Maybe if I ignore it, it&amp;rsquo;ll go away&amp;rdquo;? Well, your legacy system is making those noises right now, and trust me ‚Äì it won&amp;rsquo;t go away by itself.
I&amp;rsquo;ve spent the last 15 years listening to legacy systems whisper (and sometimes scream) their stories.</description>
    </item>
    
    <item>
      <title>Implementing Saga Pattern with Temporal in Go Microservices: Journey Through Distributed Transactions</title>
      <link>/microservices/saga-pattern-using-temporal-and-go/</link>
      <pubDate>Fri, 22 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>/microservices/saga-pattern-using-temporal-and-go/</guid>
      <description>Picture this: You&amp;rsquo;re standing in line at your favorite coffee shop. You order a complex drink (let&amp;rsquo;s call it the &amp;ldquo;Distributed Mocha Supreme&amp;rdquo;), and the barista starts a carefully choreographed dance between the espresso machine, milk steamer, and various syrup stations. Everything&amp;rsquo;s going great until‚Äîoops!‚Äîthey&amp;rsquo;re out of whipped cream. Now what? Do they throw away everything they&amp;rsquo;ve made so far? Ask you to pay for a half-finished drink? Call over three managers for approval?</description>
    </item>
    
  </channel>
</rss>
