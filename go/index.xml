<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Goes on Prasanth Janardhanan</title>
    <link>/go/</link>
    <description>Recent content in Goes on Prasanth Janardhanan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Prasanth Janardhanan</copyright>
    <lastBuildDate>Fri, 15 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a simple query parser using PEG in Go</title>
      <link>/go/peg-parser-in-go/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/go/peg-parser-in-go/</guid>
      <description>In another post, Simple Query Parser we had built a simple query parser using Participle - a parser builder for go lang. Parsing expression grammar (PEG) is a type of grammar. The advantage of PEG is that it doesn&amp;rsquo;t tolerate ambiguous grammar definitions and so is better in error reporting.
The go language port of PEG is pigeon The popular Javascript port of PEG is pegjs. A good introduction to PEG grammar can be found in the pegjs documentation and also here.</description>
    </item>
    
    <item>
      <title>How to support custom Javascript scripting in Go Applications</title>
      <link>/go/javascript-parser-in-go/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/go/javascript-parser-in-go/</guid>
      <description>Why will someone need a Javascript Parser, written natively in Go? Isn&amp;rsquo;t it a crazy, Architecture Astronauts solution that is looking for a problem? Not necessarily.
There was a time when applications allowed some kind of scripting to extend them and to make them fit into any workflow. For example VBScript for Microsoft office products. However, very few Web applications have the infrastructure to allow custom scripts inside them. There are a few that does support; one example is Google Apps Script.</description>
    </item>
    
    <item>
      <title>Let&#39;s build a search query parser in Go</title>
      <link>/go/simple-query-parser/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/go/simple-query-parser/</guid>
      <description>Mini languages are great. Makes it easy to express what you want in a concise manner. Sometimes a complex UI can be replaced with a mini-language. Some time back, google used to support a simple language in the search queries. For example: &amp;ldquo;some phrase&amp;rdquo; +required -not_required . Alas! they stopped it and Google search is less cool ever since. I would count regular expressions also as a mini-language.
Imagine we are building an online store that allows searching for products using a simple but structured query language.</description>
    </item>
    
    <item>
      <title>Background task processor in Go with persistence support using BadgerDB</title>
      <link>/go/go-task-queue-with-badgerdb-backend/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/go/go-task-queue-with-badgerdb-backend/</guid>
      <description>Goroutines can run tasks concurrently. However, for most practical scenarios, you have to keep track of the status of those tasks. In case the process exited, killed, or power cycled, a mechanism should restart the unfinished tasks. For example, imagine you moved order status emailing to a goroutine. If the process was terminated or restarted we have no way to keep track of the tasks that were in progress. A background task manager can keep track of the task in progress, retry if required, and also manage scheduled and recurring tasks.</description>
    </item>
    
    <item>
      <title>A Simple Wrapper to BadgerDB Key-Value store in Go</title>
      <link>/go/badgerdb-wrapper/</link>
      <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/go/badgerdb-wrapper/</guid>
      <description>BadgerDB is an embeddable key-value store written in Go. It is a persistent store.
In this article, we build a wrapper around badgerDB. The purpose of this wrapper is to make it simple to save simple values to the DB in &amp;ldquo;virtual tables&amp;rdquo;. The concept is an adaptation from the Sett project. Much of the code -especially the unit tests - are changed though.
Usage import( &amp;#34;github.com/prasanthmj/sett&amp;#34; ) s := sett.</description>
    </item>
    
  </channel>
</rss>
